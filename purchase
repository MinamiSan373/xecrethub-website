<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Purchase - Xecret Hub</title>
  <link rel="icon" type="image/png" href="https://i.ibb.co/VYNV7tYV/Xecret-removebg-preview.png" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');
    body {
      margin: 0;
      background-color: #000;
      color: #fff;
      font-family: 'Poppins', sans-serif;
      padding: 40px 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    h1 {
      font-weight: 700;
      font-size: 48px;
      margin-bottom: 10px;
      letter-spacing: 1.5px;
      text-align: center;
    }
    p.subtitle {
      font-weight: 600;
      color: #aaa;
      margin-bottom: 40px;
      text-align: center;
      font-size: 1.3rem;
    }
    .plans {
      display: flex;
      gap: 40px;
      flex-wrap: wrap;
      justify-content: center;
      max-width: 1100px;
      width: 100%;
    }
    .plan {
      background-color: #111;
      border-radius: 16px;
      box-shadow: 0 0 15px rgba(255, 126, 95, 0.6);
      padding: 30px 25px;
      width: 320px;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      user-select: none;
    }
    .plan:hover {
      transform: scale(1.05);
      box-shadow: 0 0 25px rgba(255, 126, 95, 0.9);
    }
    .plan h2 {
      margin: 0 0 20px;
      font-size: 2rem;
      font-weight: 700;
      color: #ff7e5f;
    }
    .payment-methods {
      width: 100%;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    .payment-option {
      background-color: #222;
      padding: 15px 20px;
      border-radius: 12px;
      box-shadow: 0 0 8px rgba(255, 126, 95, 0.3);
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 1.1rem;
      font-weight: 600;
      color: #eee;
      cursor: pointer;
      transition: background-color 0.25s ease;
    }
    .payment-option:hover {
      background-color: #ff7e5f;
      color: #000;
      box-shadow: 0 0 15px rgba(255, 126, 95, 0.9);
    }
    .payment-option span {
      user-select: none;
    }
    footer {
      margin-top: 60px;
      font-size: 0.9rem;
      color: #555;
      user-select: none;
      text-align: center;
      width: 100%;
    }
    #history {
      margin-top: 40px;
      width: 90%;
      max-width: 600px;
      background: #111;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 0 15px rgba(255, 126, 95, 0.6);
    }
    #history h3 {
      margin-top: 0;
      margin-bottom: 15px;
      color: #ff7e5f;
    }
    #history ul {
      list-style: none;
      padding-left: 0;
      max-height: 200px;
      overflow-y: auto;
      color: #ddd;
    }
    #history ul li {
      margin-bottom: 8px;
      font-size: 1rem;
    }
    #modal {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.7);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    #modalContent {
      background: #222;
      padding: 30px 25px;
      border-radius: 14px;
      max-width: 400px;
      color: #fff;
      text-align: center;
      box-shadow: 0 0 20px #ff7e5f;
      font-size: 1.2rem;
      user-select: none;
    }
    #modalContent button {
      margin-top: 20px;
      background: #ff7e5f;
      border: none;
      padding: 12px 24px;
      border-radius: 10px;
      font-weight: 700;
      font-size: 1rem;
      color: #000;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    #modalContent button:hover {
      background: #e76a48;
    }
    /* Hamburger & menu */
    .hamburger {
      position: fixed;
      top: 20px;
      right: 20px;
      width: 30px;
      height: 25px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      cursor: pointer;
      z-index: 1100;
    }
    .hamburger div {
      height: 4px;
      background: #ff7e5f;
      border-radius: 2px;
      transition: all 0.3s ease;
    }
    .hamburger.active div:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px);
    }
    .hamburger.active div:nth-child(2) {
      opacity: 0;
    }
    .hamburger.active div:nth-child(3) {
      transform: rotate(-45deg) translate(6px, -6px);
    }
    .menu-dropdown {
      position: fixed;
      top: 60px;
      right: 20px;
      background: #111;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(255, 126, 95, 0.6);
      display: none;
      flex-direction: column;
      min-width: 180px;
      z-index: 1050;
    }
    .menu-dropdown.show {
      display: flex;
    }
    .menu-dropdown a {
      color: #ff7e5f;
      text-decoration: none;
      padding: 12px 20px;
      font-weight: 600;
      border-bottom: 1px solid #ff7e5f33;
    }
    .menu-dropdown a:last-child {
      border-bottom: none;
    }
    .menu-dropdown a:hover {
      background: #ff7e5f;
      color: #000;
    }
  </style>
</head>
<body>

  <h1>Purchase Xecret Hub</h1>
  <p class="subtitle">Choose Your Plan</p>

  <div class="plans">

    <div class="plan">
      <h2>Monthly</h2>
      <div class="payment-methods">
        <div class="payment-option" onclick="buyRobux('Monthly', '1,000 Robux', 'https://www.roblox.com/catalog/93578935960753')">
          <span>1,000 Robux</span>
          <span>Monthly</span>
        </div>
        <div class="payment-option" onclick="buyPaypal('Monthly', '$6', 'https://www.paypal.me/SophaLanet/6')">
          <span>$6</span>
          <span>Paypal</span>
        </div>
        <div class="payment-option" onclick="buyTrueMoney('Monthly', '$6', '0967861310')">
          <span>$6</span>
          <span>TrueMoney</span>
        </div>
      </div>
    </div>

    <div class="plan">
      <h2>Lifetime</h2>
      <div class="payment-methods">
        <div class="payment-option" onclick="buyRobux('Lifetime', '2,000 Robux', 'https://www.roblox.com/catalog/77370347806343')">
          <span>2,000 Robux</span>
          <span>Lifetime</span>
        </div>
        <div class="payment-option" onclick="buyPaypal('Lifetime', '$11', 'https://www.paypal.me/SophaLanet/11')">
          <span>$11</span>
          <span>Paypal</span>
        </div>
        <div class="payment-option" onclick="buyTrueMoney('Lifetime', '$11', '0967861310')">
          <span>$11</span>
          <span>TrueMoney</span>
        </div>
      </div>
    </div>

  </div>

  <div id="history">
    <h3>Purchase History</h3>
    <ul id="purchase-list"></ul>
  </div>

  <footer>
    &copy; 2025 Xecret Hub.
  </footer>

  <div id="modal">
    <div id="modalContent">
      <div id="modalMessage"></div>
      <button onclick="closeModal()">OK</button>
    </div>
  </div>

  <div class="hamburger" id="hamburger">
    <div></div>
    <div></div>
    <div></div>
  </div>

  <nav class="menu-dropdown" id="menuDropdown">
    <a href="home.html">Home</a>
    <a href="purchase.html">Purchase</a>
    <a href="supported-games.html">Supported Games</a>
    <a href="executors.html">Supported Executors</a>
  </nav>

  <script>
    function addToHistory(plan, price, method) {
      const purchaseList = document.getElementById('purchase-list');
      const now = new Date();
      const timeString = now.toLocaleString();
      const record = `${timeString} - ${plan} - ${price} via ${method}`;
      let history = JSON.parse(localStorage.getItem('purchaseHistory')) || [];
      history.unshift(record);
      if (history.length > 10) history.pop();
      localStorage.setItem('purchaseHistory', JSON.stringify(history));
      renderHistory();
    }

    function renderHistory() {
      const purchaseList = document.getElementById('purchase-list');
      let history = JSON.parse(localStorage.getItem('purchaseHistory')) || [];
      purchaseList.innerHTML = '';
      history.forEach(record => {
        const li = document.createElement('li');
        li.textContent = record;
        purchaseList.appendChild(li);
      });
    }
function buyRobux(plan, price, url) {
  if (confirm(`You will be redirected to purchase ${price} for the ${plan} plan.\nPress OK to go to Roblox Store.`)) {
    addToHistory(plan, price, 'Robux');
    window.open(url, '_blank');
    showModal('Please go to Xecret Hub Discord Server in the ðŸŽ«ã€¢support channel, send your purchase proof, and wait for us.');
  }
}

function buyPaypal(plan, price, url) {
  if (confirm(`You will be redirected to purchase ${price} for the ${plan} plan.\nPress OK to go to Paypal.`)) {
    addToHistory(plan, price, 'Paypal');
    window.open(url, '_blank');
    showModal('Please go to Xecret Hub Discord Server in the ðŸŽ«ã€¢support channel, send your purchase proof, and wait for us.');
  }
}

function buyTrueMoney(plan, price, phone) {
  if (confirm(`You will be redirected to purchase ${price} for the ${plan} plan.\nPress OK to copy phone number.`)) {
    addToHistory(plan, price, 'TrueMoney');
    navigator.clipboard.writeText(phone).then(() => {
      showModal(`Phone number ${phone} copied to clipboard!`, 'Please go to Xecret Hub Discord Server in the ðŸŽ«ã€¢support channel, send your purchase proof, and wait for us.');
    });
  }
}

 let nextModalMessage = null;

function showModal(message, nextMessage = null) {
  const modal = document.getElementById('modal');
  const modalMessage = document.getElementById('modalMessage');
  modalMessage.textContent = message;
  nextModalMessage = nextMessage;
  modal.style.display = 'flex';
}

function closeModal() {
  document.getElementById('modal').style.display = 'none';
  if (nextModalMessage) {
    const msg = nextModalMessage;
    nextModalMessage = null;
    showModal(msg);
  }
}


    const hamburger = document.getElementById('hamburger');
    const menuDropdown = document.getElementById('menuDropdown');

    hamburger.addEventListener('click', () => {
      hamburger.classList.toggle('active');
      menuDropdown.classList.toggle('show');
    });

    window.addEventListener('click', (e) => {
      if (!hamburger.contains(e.target) && !menuDropdown.contains(e.target)) {
        hamburger.classList.remove('active');
        menuDropdown.classList.remove('show');
      }
    });

    renderHistory();
  </script>

</body>
</html>
